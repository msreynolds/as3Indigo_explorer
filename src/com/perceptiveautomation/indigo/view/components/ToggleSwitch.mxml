<?xml version="1.0" encoding="utf-8"?>
<s:HGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	implements="mx.controls.listClasses.IListItemRenderer"
	verticalAlign="middle"
	horizontalAlign="left"
	width="100%"
	height="36"
	gap="7"
	>
	
	<fx:Script>
		<![CDATA[
			import com.perceptiveautomation.indigo.device.events.IndigoDeviceActionEvent;
			import com.perceptiveautomation.indigo.vo.AbstractIndigoDevice;
			import com.perceptiveautomation.indigo.vo.DimmableDevice;
			import com.perceptiveautomation.indigo.vo.OnOffDevice;
			
			import mx.controls.listClasses.IListItemRenderer;
			
			private var _device:AbstractIndigoDevice;

			[Bindable(event='deviceChanged')]
			public function get device():AbstractIndigoDevice
			{
				return this._device;
			}
			
			public function set device(value:AbstractIndigoDevice):void
			{
				if (this._device != value)
				{
					if (this._device)
						this._device.removeEventListener('isOnChanged', handleDeviceIsOnChange);
					
					this._device = value;
					
					if (this._device)
						this._device.addEventListener('isOnChanged', handleDeviceIsOnChange);
					
					if (this._device)
						this.label = this._device.name;
					
					if (this._device is DimmableDevice)
					{
						sldBrightness.visible = true;
						sldBrightness.includeInLayout = true;
					}
					else
					{
						sldBrightness.visible = false;
						sldBrightness.includeInLayout = false;
					}

					dispatchEvent(new Event('deviceChanged'));
				}	
			}
			
			private function handleDeviceIsOnChange(event:Event):void
			{
				//NOOP
			}
			
			
			private function turnOff():void
			{
				if (device is OnOffDevice)
				{ 
					OnOffDevice(device).turnOff();
					new IndigoDeviceActionEvent(IndigoDeviceActionEvent.TURN_OFF, device.name, 0).dispatch();
					lblName.setStyle('color', '#333333');	
				}
			}
			
			private function turnOn():void
			{
				if (device is OnOffDevice) 
				{
					OnOffDevice(device).turnOn();
					new IndigoDeviceActionEvent(IndigoDeviceActionEvent.TURN_ON, device.name, 0).dispatch();
					lblName.setStyle('color', '#009900');
				}	
			}
			
			private function setBrightness(value:int):void
			{
				if (device is DimmableDevice)
				{	
					DimmableDevice(device).brightness = value;
					
					new IndigoDeviceActionEvent(IndigoDeviceActionEvent.SET_BRIGHTNESS, device.name, value).dispatch();
				}
			}
			
			public function set label(value:String):void
			{
				if (lblName)
				{
					lblName.text = value;
				}
			}
			
			public function get data():Object
			{
				return this.device;
			}
			
			public function set data(value:Object):void
			{
				if (value is AbstractIndigoDevice)
				{
					this.device = value as AbstractIndigoDevice;
					
					if (data is OnOffDevice)
					{
						if ( OnOffDevice(data).isOn )
						{
							lblName.setStyle('color', '#009900');
						}	
						else
						{
							lblName.setStyle('color', '#333333');	
						}
					}
				}	
			}
			
		]]>
	</fx:Script>
		
	<s:Label id="lblName" text="{this.device.name}" width="145" fontWeight="bold" fontSize="12" />
		
	<s:Button 
		id="btnOff" 
		width="32"
		click="turnOff();"/>
	
	<s:Button 
		id="btnOn" 
		width="32"
		click="turnOn();"/>
	
	<s:HSlider
		id="sldBrightness" 
		minimum="0" 
		maximum="100" 
		width="75"
		change="setBrightness(sldBrightness.value);" 
		value="{(device is DimmableDevice) ? (DimmableDevice(device).brightness) : 0}" 
		/>

</s:HGroup>